{"version":3,"sources":["assets/logo.png","assets/tile.jpg","components/tile/tile.tsx","assets/assets.tsx","components/footer/footer.tsx","components/card/card.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","StyledTile","styled","img","Tile","src","this","props","image","React","PureComponent","images","logo","HTMLImageElement","require","tile","BottomBar","div","Logo","Header","svg","Text","text","Footer","viewBox","CardStyled","Card","GlobalStyle","createGlobalStyle","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gIAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,0RCQ3C,IAAMC,EAAkBC,IAAOC,IAAV,KAmBAC,E,iLAEb,OACI,kBAACH,EAAD,CAAYI,IAAQC,KAAKC,MAAMC,Y,GAHTC,IAAMC,eC3B3BC,EAAS,CAClBC,KAAMC,iBAAmBC,EAAQ,IACjCC,KAAMF,iBAAmBC,EAAQ,K,ivBCMrC,IAAME,EAAiBd,IAAOe,IAAV,KASdC,EAAOhB,IAAOC,IAAV,KAOJgB,EAASjB,IAAOkB,IAAV,KASNC,EAAOnB,IAAOoB,KAAV,KAOWC,E,iLAEb,OACI,kBAACP,EAAD,KACI,kBAACE,EAAD,CAAMb,IAAQM,EAAOC,OACrB,kBAACO,EAAD,CAAQK,QAAQ,eACZ,kBAACH,EAAD,KAAQf,KAAKC,MAAMe,Y,GANHb,IAAMC,e,oKClC1C,IAAMe,EAAavB,IAAOe,IAAV,KAOKS,E,iLAEb,OAAO,kBAACD,EAAD,KACG,kBAAC,EAAD,CAAMjB,MAAUG,EAAOI,OACvB,kBAAC,EAAD,CAAQO,KAAO,uB,GAJCb,IAAMC,e,sMCRxC,IAAMiB,EAAcC,YAAH,KAMXC,EAAY3B,IAAOe,IAAV,KAIMa,E,iLAEjB,OAAO,kBAACD,EAAD,KACG,kBAACF,EAAD,MACA,kBAAC,EAAD,W,GAJmBlB,IAAMC,eCHnBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2352c4dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2a3f011a.png\";","module.exports = __webpack_public_path__ + \"static/media/tile.25b4e634.jpg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { any } from 'prop-types';\r\n\r\ninterface ITileProps {\r\n    image: string;\r\n}\r\n\r\nconst StyledTile: any = styled.img`\r\n    width: 100%;\r\n    object-fit: cover;\r\n    display: block;\r\n    max-width: 720px;\r\n`\r\n\r\n/*const StyledTile: any = styled.div`\r\n        width: 100%;\r\n        height: 100%;\r\n        max-height: 100%;\r\n        margin: 0;\r\n        padding: 0;\r\n        background-image: url('${(props: any) => props.imgUrl}');\r\n        background-size:100% 100%;\r\n        background-repeat: no-repeat;\r\n        background-size: cover;\r\n`*/\r\n\r\nexport default class Tile extends React.PureComponent<ITileProps>{  \r\n    render() {\r\n        return(\r\n            <StyledTile src = { this.props.image } /> \r\n        )\r\n    }\r\n}","export const images = {\r\n    logo: HTMLImageElement = require('./logo.png'),\r\n    tile: HTMLImageElement = require('./tile.jpg')\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { images } from '../../assets/assets';\r\n\r\ninterface IFooterProps {\r\n    text: String\r\n}\r\n\r\nconst BottomBar: any = styled.div`\r\n    position: absolute;\r\n    bottom: 0px;\r\n    height: 30%;\r\n    width: 100%;\r\n    background-color: #0000007a;\r\n    text-align: center;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n    display: inline-block;\r\n    height: -webkit-fill-available;\r\n    float: left;\r\n    margin-left: 5%;\r\n`;\r\n\r\nconst Header = styled.svg`\r\n    position: relative;\r\n    top: 60%;\r\n    float: left;\r\n    width: 40%;\r\n    margin-left: 5%;\r\n    overflow: visible;\r\n`;\r\n\r\nconst Text = styled.text `\r\n    color: white;\r\n    font-family: Montserrat,sans-serif;\r\n    font-weight: 700;\r\n    fill: white;    \r\n`;\r\n\r\nexport default class Footer extends React.PureComponent<IFooterProps> {\r\n    render() {\r\n        return(\r\n            <BottomBar>\r\n                <Logo src = { images.logo }/>\r\n                <Header viewBox='0 0 100 100'>\r\n                    <Text>{ this.props.text }</Text>\r\n                </Header>\r\n            </BottomBar>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Tile from '../tile/tile';\r\nimport styled from 'styled-components';\r\nimport Footer from '../footer/footer';\r\nimport { images } from '../../assets/assets';\r\n\r\nconst CardStyled = styled.div`\r\n  display: inline-block;\r\n  position: relative;\r\n  text-align: center;\r\n  max-width: 720px;\r\n`;\r\n\r\nexport default class Card extends React.PureComponent {\r\n    render() {\r\n        return(<CardStyled>\r\n                  <Tile image = { images.tile }/>\r\n                  <Footer text = \"Home and Away\" />\r\n                </CardStyled>)\r\n      }\r\n\r\n}","import React from 'react';\r\nimport Card from './components/card/card';\r\nimport  styled, {createGlobalStyle} from 'styled-components';\r\n\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0px;\r\n  }\r\n`;\r\n\r\nconst Container = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nexport default class App extends React.PureComponent {\r\n  render() {\r\n    return(<Container>\r\n              <GlobalStyle />\r\n              <Card />\r\n            </Container>)\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}